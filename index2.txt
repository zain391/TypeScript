// var plan1 = {
//     name: "Basic",
//     price: 3.99,
//     space: 100,
//     transfer: 1000,
//     pages: 10,
//     discountMonths: [2,6, 7],
//     // now we are going to create a method for the object an then we will emmbed it in the object for its use
//     calAnnual:function (){
//         let bestPrice=plan1.price;
//         const currentDate=new Date();
//         const month=currentDate.getMonth();
//         for(let i=0; i<2; i++){
//             if(plan1.discountMonths[i]==month){
//                 bestPrice= plan1.price * .8;
//                 //console.log(bestPrice);
//             }
//             else{
//                 //console.log("no the current month is not in the plan so u wont get a discount");
//             }
//         }
//     }
// };
// //console.log(plan1);
// plan1.calAnnual();
// function ForPlans(name1,price,space,transfer,pages,discountMonths){
//     // note that the first letter of the constructor is kept for Capital 
//     // it is just for the sake of Understading and easily finnding the constructor seprately from the normal function you can also create a portotype by using the lower case first letter 
//     this.name1=name1;
//     this.price=price;
//     this.space=space;
//     this.transfer=transfer;
//     this.pages=pages;
//     this.discountMonths=discountMonths;
// }
// const plan01=new ForPlans('Basic01',001,00100,"10 GB",10,[2,6,7]);
// const plan02=new ForPlans('pro',002,002,"20 GB",20,[2,6,7]);
// //console.log(plan01);
// //console.log(plan02);
// // now we are going to learn about the browser model
// const whereAt=window.location.href;
// //console.log(whereAt);
// // now we are going to get the domain name of the website
// const DomainName=window.location.hostname;
// //console.log(DomainName);
// const path1=window.location.pathname;
// //console.log(path1);
// const hashing=window.location.hash;
// //console.log(hashing);
// // window.location.href='https://www.facebook.com/';
// // now we are going to learn about the classes in the js 
// class first {
//     constructor(name,age){
//         this.name=name;
//         this.age=age;

//     }
// }
// // we can create the objects by using both classes and the constructor functions
// const first1=new first('zain',20);
// console.log(first);
// console.log(first1);
// import { myself } from "./module1";
// //console.log(myself);
// import Umer from "./module2";
// //console.log("i am umer imported from another modules",Umer);
// import message from "./module1";
// //console.log(message());
// import { JSONTry } from "./module1";
// //console.log(JSONTry);


// now we are going to learn about the lexical scrope and scope chain in js
let a = 'hello wold';
function first() {
    let b = "how are you";

    second();

    function second() {
        let c = "i am good";
        console.log(a);
        console.log(b);
        console.log(c);
    }
}
// first();
// the lexitiy of a function is a phenomeanon that the function that lies inside a function or we can say that the child of afunction can access the parameters as well as the varibales of its parent function and all the variables that lies gloabllay but the parent function can not acces the parameteres and varibles creadet in the child function 
// here is another example 
const gollobalyMain = 'i am the variable created globally';
function parentMain() {
    const random = 'i am the varialbe of parent function ';
    console.log(random);
    // parentMain() this also not show us any result
    childOne();
    function childOne() {
        const random2 = 'i am the variable of childOne function ';
        console.log('random2:',random2);
        console.log('random1:',random);
        nestedChildOne()
        function nestedChildOne() {
            // childOne();this will also not show us the output of childOne function nestedChildOne is not called and also it is not accessable in the scope of the nestedChildOne
            // childOne();
            const random3 = 'i am the varible of nested childone function ';
            console.log('now we are in the nested function ');
            console.log(random);
            console.log(random2);
            console.log(random3);
        }
    }
}

parentMain();
// console.log(`the child one is only accessable in side the mainparent function `);
// so this is what we do call as lexicity of the function

// // again browser object model
// const ran=window.location;
// const firstp=ran.href;
// const secondp=ran.hash;
// const threep=ran.host;
// const fourp=ran.pathname;
// const fivep=ran.port;
// console.log('port ',fivep);
// console.log('firstp',firstp);
// console.log('secondp hash',secondp);
// console.log('three host',threep);
// console.log('fourp pathname',fourp);

// now we are going to learn about the exception handling
// console.log('it should be in the console 1');
// function playingWithTryCatch1(){
//     const playingWithTryCatch2='i am an alert with wrong speelings';
//     alet(playingWithTryCatch2)

// }
// playingWithTryCatch1();
// console.log('it should be in the console 2');

function playingWithTryCatch1(){
    try{
        const playingWithTryCatch2='i am an alert with wrong speelings';
    alet(playingWithTryCatch2)
    }catch(err){
       console.log(err);
    }

}
playingWithTryCatch1();
console.log('i am after try catch');
const val=prompt("enter a value between 5 to 10");
if(val<5 || val>10){
    throw('plz enter a valid value');
}

// now we are going to learn about the call back functions
let studentsFirstArr=[
    {name1:'zain',stdId:123},
    {name1:'umer',stdId:456},
    {name1:'Ali',stdId:789}
];

const enrollStudents=function (stdPara){
    console.log('std at first enroll ',studentsFirstArr);
    setTimeout(function () {
        // stdPara.push(studentsFirstArr);
        studentsFirstArr.push(stdPara);
        console.log('std after at first enroll ',studentsFirstArr);
    }, 5000);
}
const getStudents=function (stdPara2){
    setTimeout(function () {
        studentsFirstArr.forEach(function (items){
            console.log(items.name1);
        })
            console.log("these are the std whoare enrolled before and after both",stdPara2);
    }, 3000);
}
const newStd={name1:"Qamer",stdId:000};
// console.log(enrollStudents);
enrollStudents(newStd);
getStudents(studentsFirstArr);
// if we do not handle the reject and resolve seperatelly as we are doing now then the function will always return resolve 
// now we are going to make this function more precises by using the js Arrow function
const fun4=async  ()=>{
    return 45;
}
console.log(fun4());
// as we know that if we want to return a single thing in js Arrow function then we can also make the code more shorter 
const fun5=async  ()=>60;
console.log(fun5());
// now we are going to add the .then for promise resolvation 
console.clear();
const fun6=async  ()=>60;
fun6().then(function (val){
    console.log('i am .then console');
    return val;
});
console.log(fun6());
// now we are going to use the arrow function 
const fun7=async  ()=>60;
fun6().then((val)=>{
    console.log('i am .then console');
    return val;
});
console.log(fun7());









